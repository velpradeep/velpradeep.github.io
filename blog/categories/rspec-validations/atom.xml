<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec validations | My Tech Blog...]]></title>
  <link href="http://velpradeep.github.io/blog/categories/rspec-validations/atom.xml" rel="self"/>
  <link href="http://velpradeep.github.io/"/>
  <updated>2014-07-18T16:28:01+05:30</updated>
  <id>http://velpradeep.github.io/</id>
  <author>
    <name><![CDATA[Vel Pradeep]]></name>
    <email><![CDATA[velrangitham.ms@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Rspec Test Coverage in Rails]]></title>
    <link href="http://velpradeep.github.io/blog/2013/06/03/basic-rspec-test-coverage/"/>
    <updated>2013-06-03T00:00:00+05:30</updated>
    <id>http://velpradeep.github.io/blog/2013/06/03/basic-rspec-test-coverage</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><script>  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-51531085-1', 'velpradeep.blogspot.in');   ga('send', 'pageview');  </script> <div dir="ltr" style="text-align: left;" trbidi="on"><span style="color: #76a5af;"><br /></span><span style="color: #76a5af;"><b>Basic Rspec Test Coverage Model Associations</b></span><br /><b><br /></b><b>How to do Rspec Test Coverage in Rails Models :</b><br /><br />This section covers the basic Rspec test coverage for rails models. Basically, we need to write test coverage to the following areas.<br /><br /><br /><ul style="text-align: left;"><li>Model Associations</li><li>Validations</li><li>Mass assignments (attr_accessible)</li><li>callbacks</li><li>custom validations</li></ul><span style="color: #76a5af;"><br /></span><span style="color: #76a5af;"><b>Model Associations</b></span><br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In Rails, an association is a connection between two Active Record models, we need to test first if the models associated with the specified models or not?<br /><br /><span style="color: #45818e;"><b>Rails supports six types of associations:</b></span><br /><b></b> <br /><ul style="text-align: left;"><li><b>belongs_to</b></li><li><b>has_one</b></li><li><b>has_many</b></li><li><b>has_many :through</b></li><li><b>has_one :through</b></li><li><b>has_and_belongs_to_many</b></li></ul><br /><span style="color: #cc0000;"><b>belongs_to :</b></span><br /><b><br /></b>Example 1:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;"> <i>belongs_to :currency</i></span><br /><br />&nbsp;we can write the Rspec for belongs_association like this,<br />&nbsp; &nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #3d85c6;">&nbsp;&nbsp; it { should belong_to(:user) }</span><br /><br />Example 2:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;"> belongs_to :home_team, :class_name =&gt; 'Team'</span><br /><br />it can be tested like..<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;">&nbsp; it { should belong_to(:home_team).class_name(:team) }</span><br /><br />Example 3:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style="color: #6fa8dc;"> belongs_to :home, :class_name =&gt; 'Team', :foreign_key =&gt; :home_id</span><br /><br />it can be tested like..<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;"> it { should belong_to(:home).class_name(:team).foreign_key(:home_id) }</span><br /><br /><span style="color: #cc0000;"><b>has_one :</b></span><br /><b><br /></b>Example 1:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;">&nbsp;&nbsp;&nbsp; has_one :build_snapshot</span><br /><br />we can write the Rspec test like this,<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;">&nbsp;&nbsp; it { should have_one(:build_snapshot) }</span><br /><br />Example 2:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #6fa8dc;">&nbsp;&nbsp; has_one :build_snapshot, :dependent =&gt; :destroy</span><br /><br />we can write the Rspec test like this,<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_one(:build_snapshot).dependent(:destroy)}<br /><br />Example 3:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_one :last_receipt_entered, :class_name =&gt; 'BuildReceipt' <br /><br />we can write the Rspec test like this,<br /><br />&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { shouldhave_one(:last_receipt_entered).class_name("BuildReceipt")}<br /><br /><span style="color: #cc0000;"><b>has_many :</b></span><br /><br />Example 1:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_many :users<br />we can write the Rspec test like this,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_many(:users) }<br /><br />Example 2:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_many :users, :dependent =&gt; :destroy<br />we can write the Rspec test like this,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_many(:users).dependent(:destroy)}<br /><br />Example 3:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_many :users, :class_name =&gt; 'Customer'<br />we can write the Rspec test like this,<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_many(:users).class_name("Customer")}<br /><br />Example 4:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_many :snapshots, :class_name =&gt; 'ClientSnapshot',:conditions =&gt; ["released_yn = 'Y'"], :order =&gt;'snapshot_dt DESC'<br /><br />we can write the Rspec test like this,<br /><br />&nbsp;it { should have_many(:snapshots).class_name("ClientSnapshot").conditions("released_yn = 'Y'").order("snapshot_dt DESC")}<br /><br /><span style="color: #cc0000;"><b>has_many :through associations :</b></span><br /><b><br /></b><b>Example 1:</b><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_many :client_cash_receipts, :through =&gt; :client_snapshots<br /><br />we can write the Rspec test like this,<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_many(:client_cash_receipts).through(:client_snapshots) }<br /><br /><span style="color: #cc0000;"><b>has_and_belongs_to_many :</b></span><br /><br />Example 1:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_and_belongs_to_many, :through =&gt; :client_snapshots<br />we can write the Rspec test like this,<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_and_belong_to_many(:client_cash_receipts) }<br /><br /><span style="color: #cc0000;"><b>has_one :through associations :</b></span><br /><br />Example 1:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has_one :manager, :through =&gt; :customers<br /><br />we can write the Rspec test like this,<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it { should have_one(:manager).through(:customers) }<br /><span style="color: #45818e;"><br /></span><span style="color: #45818e;"><b>Model Validations :</b></span><br /><b><br /></b><br />In Rails, validation is a process to ensure only the valid data is stored into the database.<br /><span style="color: blue;"><br /></span><span style="color: #6fa8dc;"><b>Validation helpers :</b></span><br /><br /><span style="color: #cc0000;"><b>Testing Presence validation with RSpec</b></span><br /><b><br /></b>Example 1:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; validates :name, :presence =&gt; true<br /><br />we can write Rsepec coverage for this validation helper like the below ...<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it {should validate_presence_of(:name)}<br /><br /><span style="color: #cc0000;"><b>presence with custom message</b></span><br /><br />Example<br /><br />&nbsp; &nbsp; &nbsp; validates :manager, :presence =&gt; { :message =&gt; _("Manager must exist") }<br /><br />we can write Rsepec coverage for this validation helper like the below ...<br /><br />it {should validate_presence_of(:manager).with_message("Manager must exist")}<br /><br /><span style="color: #cc0000;"><b>Testing length validation with RSpec</b></span><br /><b><br /></b>Example :<br /><br />validates :password, :length =&gt;{:minimum =&gt; 8,:too_short =&gt; "password is too short" }<br /><br />validates :password, :length =&gt;{:maximum =&gt; 8,:too_short =&gt; "password is too long" }<br /><br />we can write Rsepec coverage for this validation helper like the below ...<br /><br />it { should ensure_length_of(:password).is_at_least(8).with_message(/password is too short/) }<br />it { should ensure_length_of(:password).is_at_least(8).with_message(/password is too long/) }<br /><br /><span style="color: #cc0000;"><b>Testing numericality validation with RSpec</b></span><br /><b><br /></b>Example :<br />- validates :age, :numericality =&gt; { :greater_than =&gt; 18,:only_integer =&gt; true }<br /><br />we can write Rsepec coverage for this validation helper like the below ...<br /><br />it { should validate_numericality_of(:age, :greater_than =&gt; 18, :only_integer =&gt; true) }<br /><br /><span style="color: #cc0000;"><b>ActiveModel Matchers</b></span><br /><b><br /></b>Matchers to test validations and mass assignments:<br /><br />examples :<br /><br /><span style="color: #674ea7;"><b>it { should validate_uniqueness_of(:title) }</b></span><br /><span style="color: #674ea7;"><b>it { should validate_uniqueness_of(:title).scoped_to(:user_id, :category_id) }</b></span><br /><span style="color: #674ea7;"><b>it { should validate_presence_of(:body).with_message(/wtf/) }</b></span><br /><span style="color: #674ea7;"><b>it { should validate_presence_of(:title) }</b></span><br /><span style="color: #674ea7;"><b>it { should validate_numericality_of(:user_id) }</b></span><br /><span style="color: #674ea7;"><b>it { should ensure_inclusion_of(:status).in_array(['draft', 'public']) }</b></span><br /><br /><span style="color: #cc0000;"><b>Testing Mass assignments with Rspec</b></span><br /><br /><br /><b>t { should allow_mass_assignment_of :some_field }</b><br /><br /><span style="color: #6aa84f;"><b>Testing callbacks</b></span><br /><b><br /></b>Callbacks are methods that get called at certain moments of an object’s life cycle. we need to test those callbacks in rails models.<br /><br />It executes whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database<br /><br /><span style="color: #a64d79;">examples</span><br /><span style="color: #a64d79;"><br /></span><span style="color: #a64d79;"><b>it{ should have_callback(:check_before_destroy).on(:before_destroy) }</b></span><br /><span style="color: #a64d79;"><b>it{ should have_callback(:validate_name).on(:before_create) }</b></span><br /><span style="color: #a64d79;"><b>it{ should have_callback(:validations_before_destroy).on(:after_create) }</b></span><br /><span style="color: #a64d79;"><b>it{ should have_callback(:validate_name).on(:after_save) }</b></span><br /><span style="color: #a64d79;"><b>it{ should have_callback(:check_validations).on(:before_validation) }</b></span><br /><span style="color: #a64d79;"><b>it{ should have_callback(:validate_name).on(:after_validation) }</b></span><br /><br /><br /><br /><br /><br /><br /><br /></div></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>John Hirbour</div>
<div class='content'>
in newer versions foreign_key should be with_foreign_key</div>
</div>
<div class='comment'>
<div class='author'>Fitria Rahmaani</div>
<div class='content'>
thanks a lot for this one .. save my hours :D<br /><br />but i got an error when i try has_many with class_name and foreign_key<br /><br />Failure/Error: it { should have_many(:subgroups).class_name(&quot;Group&quot;).foreign_key(:parent_id) }<br />     NoMethodError:<br />       protected method `foreign_key&#39; called for #<br /><br />do you know how to resolve it ?</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
